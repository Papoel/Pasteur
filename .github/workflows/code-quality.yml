name: Code Quality
on:
  push:
    branches:
      - main
jobs:
  symfony:
    name: Symfony 6.1 (PHP ${{ matrix.php-versions }})
    # https://hub.docker.com/_/ubuntu/
    runs-on: ubuntu-latest
    services:
      # https://docs.docker.com/samples/library/mysql/
      mysql:
        image: mariadb:latest
        env:
          MYSQL_DATABASE: db_pasteur
          # MYSQL_ROOT_PASSWORD: ${{ secrets.CI_DB_PASSWORD }}
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        # DATABASE_URL
    strategy:
      fail-fast: true
      matrix:
        php-versions: ['8.1']
    steps:
      # —— Setup GitHub actions 🐙 —————————————————————————————————————————————
      # https://github.com/actions/checkout (official)
      - name: Git checkout placeholder-service
        uses: actions/checkout@v3

      # https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: none
          tools: composer:v2
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json
        env:
          update: true

      - name: Check PHP Version 🐘
        run: php -v

      ## —— Yarn 🐱 ————————————————————————————————————————————————————————————
      - name: Yarn install
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - run: yarn install

      - name: Yarn build
        run: yarn run build

      # —— Composer 🧙‍️ —————————————————————————————————————————————————————————
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install

      - name: PHP-CS-Fixer
        uses: docker://oskarstark/php-cs-fixer-ga
        with:
          args: --config=.php_cs.dist --diff --dry-run

      ## —— Static analysis ✨ —————————————————————————————————————————————————
      - name: Dump test env
        run: |
          php bin/console about --env=test

      # —— Symfony 🎵 ——————————————————————————————————————————————————————————
      - name: Check Symfony requirements
        run: vendor/bin/requirements-checker

      - name: Check the Symfony console
        run: |
          APP_ENV=test php bin/console cache:clear
          php bin/console -V

      ## —— Tests ✅ ———————————————————————————————————————————————————————————
      - name: Run functional and unit tests
        run: |
          php bin/console cache:clear --env=test
          php bin/console doctrine:database:drop --force --env=test --if-exists
          php bin/console doctrine:database:create --env=test
          php bin/console doctrine:schema:update --env=test --force
          php vendor/phpunit/phpunit/phpunit --testdox --colors=always
